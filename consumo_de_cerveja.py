# -*- coding: utf-8 -*-
"""CONSUMO DE CERVEJA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kd3q2ehOwagyyQTnn7ufMcS319EPYqwK
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("dongeorge/beer-consumption-sao-paulo")

print("Path to dataset files:", path)

# prompt: ler em dataframe os dados

import pandas as pd

df = pd.read_csv(path + '/Consumo_cerveja.csv', sep=',')

print(df.head())

df.head()

# prompt: Usando o DataFrame df: multiplicar coluna 'Consumo de cerveja (litros)' por 1000

# Multiply the 'Consumo de cerveja (litros)' column by 1000
df['Consumo de cerveja (litros)'] = df['Consumo de cerveja (litros)'] * 1000
# Display the modified dataframe to verify the changes
#print(df.head())

# @title Final de Semana vs Consumo de cerveja (litros)

from matplotlib import pyplot as plt
df.plot(kind='scatter', x='Final de Semana', y='Consumo de cerveja (litros)', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Consumo de cerveja (litros)

from matplotlib import pyplot as plt
df['Consumo de cerveja (litros)'].plot(kind='hist', bins=20, title='Consumo de cerveja (litros)')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Final de Semana

from matplotlib import pyplot as plt
df['Final de Semana'].plot(kind='hist', bins=20, title='Final de Semana')
plt.gca().spines[['top', 'right',]].set_visible(False)

# prompt: Usando o DataFrame df: gerar mapa de correlação entre consumo de cerveja

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Convert relevant columns to numeric, handling errors by coercing to NaN
for col in ['Temperatura Media (C)', 'Temperatura Minima (C)', 'Temperatura Maxima (C)', 'Precipitacao (mm)']:
    df[col] = pd.to_numeric(df[col].astype(str).str.replace(',', '.'), errors='coerce')

# Drop rows with NaN values resulting from the conversion
df = df.dropna()

# Select only numeric features for correlation
numeric_features = df.select_dtypes(include=['number'])

# Create the correlation heatmap
plt.figure(figsize=(12, 8))
correlation_matrix = numeric_features.corr()  # Calculate the correlation matrix for numeric features only

# Customize the heatmap
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Beer Consumption')
plt.show()

# prompt: gerar modelo de regressão linear  para consumo de cerveja

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Assuming 'df' is your DataFrame with preprocessed data
# (as in the previous code example)

# Define features (X) and target variable (y)
X = df[['Temperatura Media (C)', 'Temperatura Minima (C)', 'Temperatura Maxima (C)', 'Precipitacao (mm)', 'Final de Semana']]
y = df['Consumo de cerveja (litros)']


# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Print model coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)